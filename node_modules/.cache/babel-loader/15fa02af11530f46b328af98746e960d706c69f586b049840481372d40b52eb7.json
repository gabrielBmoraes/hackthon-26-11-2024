{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"classPrefix\", \"character\", \"format\", \"value\", \"defaultValue\", \"placeholder\", \"onChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"onPaste\"];\nimport React, { useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from \"../Input/index.js\";\nimport { isValid } from \"../internals/utils/date/index.js\";\nimport { useClassNames, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport { validateDateTime, useDateInputState, useInputSelection, useKeyboardInputEvent, useIsFocused, useSelectedState, useFieldCursor } from \"../DateInput/index.js\";\nimport { useCustom } from \"../CustomProvider/index.js\";\nimport { getInputSelectedState, DateType, getDateType, isSwitchDateType } from \"./utils.js\";\n/**\n * The DateRangeInput component lets users select a date with the keyboard.\n * @version 5.59.0\n * @see https://rsuitejs.com/components/date-range-input/\n */\nvar DateRangeInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useCustom = useCustom('Calendar', props),\n    propsWithDefaults = _useCustom.propsWithDefaults,\n    parseDate = _useCustom.parseDate,\n    getLocale = _useCustom.getLocale;\n  var _getLocale = getLocale('DateTimeFormats'),\n    shortDateFormat = _getLocale.shortDateFormat,\n    dateLocale = _getLocale.dateLocale;\n  var className = propsWithDefaults.className,\n    _propsWithDefaults$cl = propsWithDefaults.classPrefix,\n    classPrefix = _propsWithDefaults$cl === void 0 ? 'date-range-input' : _propsWithDefaults$cl,\n    _propsWithDefaults$ch = propsWithDefaults.character,\n    character = _propsWithDefaults$ch === void 0 ? ' ~ ' : _propsWithDefaults$ch,\n    _propsWithDefaults$fo = propsWithDefaults.format,\n    formatStr = _propsWithDefaults$fo === void 0 ? shortDateFormat : _propsWithDefaults$fo,\n    valueProp = propsWithDefaults.value,\n    _propsWithDefaults$de = propsWithDefaults.defaultValue,\n    defaultValue = _propsWithDefaults$de === void 0 ? [] : _propsWithDefaults$de,\n    placeholder = propsWithDefaults.placeholder,\n    onChange = propsWithDefaults.onChange,\n    onKeyDown = propsWithDefaults.onKeyDown,\n    onBlur = propsWithDefaults.onBlur,\n    onFocus = propsWithDefaults.onFocus,\n    onPaste = propsWithDefaults.onPaste,\n    rest = _objectWithoutPropertiesLoose(propsWithDefaults, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  var inputRef = useRef();\n  var _useSelectedState = useSelectedState(),\n    selectedState = _useSelectedState.selectedState,\n    setSelectedState = _useSelectedState.setSelectedState;\n  var rangeFormatStr = \"\" + formatStr + character + formatStr;\n  var _useControlled = useControlled(valueProp, defaultValue),\n    value = _useControlled[0],\n    setValue = _useControlled[1],\n    isControlled = _useControlled[2];\n  var _useState = useState(DateType.Start),\n    dateType = _useState[0],\n    setDateType = _useState[1];\n  var dateInputOptions = {\n    formatStr: formatStr,\n    locale: dateLocale,\n    isControlledDate: isControlled\n  };\n  var startDateState = useDateInputState(_extends({}, dateInputOptions, {\n    date: (value === null || value === void 0 ? void 0 : value[0]) || null\n  }));\n  var endDateState = useDateInputState(_extends({}, dateInputOptions, {\n    date: (value === null || value === void 0 ? void 0 : value[1]) || null\n  }));\n  var _useFieldCursor = useFieldCursor(formatStr, valueProp),\n    isMoveCursor = _useFieldCursor.isMoveCursor,\n    isResetValue = _useFieldCursor.isResetValue,\n    increment = _useFieldCursor.increment,\n    reset = _useFieldCursor.reset;\n  var getActiveState = function getActiveState(type) {\n    if (type === void 0) {\n      type = dateType;\n    }\n    return type === DateType.Start ? startDateState : endDateState;\n  };\n  var _useIsFocused = useIsFocused({\n      onBlur: onBlur,\n      onFocus: onFocus\n    }),\n    focused = _useIsFocused[0],\n    focusEventProps = _useIsFocused[1];\n  var renderedValue = useMemo(function () {\n    var dateString = startDateState.toDateString() + character + endDateState.toDateString();\n    if (!startDateState.isEmptyValue() || !endDateState.isEmptyValue()) {\n      return dateString;\n    }\n    return !focused ? '' : dateString;\n  }, [character, endDateState, focused, startDateState]);\n  var keyPressOptions = {\n    formatStr: formatStr,\n    rangeFormatStr: rangeFormatStr,\n    localize: dateLocale.localize,\n    selectedMonth: getActiveState().dateField.month,\n    dateString: renderedValue,\n    dateType: dateType,\n    character: character\n  };\n  var setSelectionRange = useInputSelection(inputRef);\n  var handleChange = useEventCallback(function (date, event) {\n    var nextValue = dateType === DateType.Start ? [date, value === null || value === void 0 ? void 0 : value[1]] : [value === null || value === void 0 ? void 0 : value[0], date];\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    setValue(nextValue);\n  });\n  var handleClear = useEventCallback(function (event) {\n    startDateState.setNewDate(null);\n    endDateState.setNewDate(null);\n    setSelectionRange(0, 0);\n    reset();\n    setValue(null);\n    onChange === null || onChange === void 0 ? void 0 : onChange(null, event);\n  });\n  var onSegmentChange = useEventCallback(function (event, nextDirection) {\n    var input = event.target;\n    var key = event.key;\n    var direction = nextDirection || (key === 'ArrowRight' ? 'right' : 'left');\n    if (input.selectionEnd === null || input.selectionStart === null) {\n      return;\n    }\n    var cursorIndex = direction === 'right' ? input.selectionEnd : input.selectionStart;\n    var nextDateType = dateType;\n    if (isSwitchDateType(renderedValue, character, cursorIndex, direction)) {\n      nextDateType = dateType === DateType.Start ? DateType.End : DateType.Start;\n      setDateType(nextDateType);\n    }\n    var state = getInputSelectedState(_extends({}, keyPressOptions, {\n      dateType: nextDateType,\n      selectedMonth: getActiveState(nextDateType).dateField.month,\n      input: input,\n      direction: direction\n    }));\n    setSelectedState(state);\n    setSelectionRange(state.selectionStart, state.selectionEnd);\n\n    // If the selected field changes, reset the input state\n    if (selectedState.selectedPattern !== state.selectedPattern) {\n      reset();\n    }\n  });\n  var onSegmentValueChange = useEventCallback(function (event) {\n    var input = event.target;\n    var key = event.key;\n    var offset = key === 'ArrowUp' ? 1 : -1;\n    var state = getInputSelectedState(_extends({}, keyPressOptions, {\n      input: input,\n      valueOffset: offset\n    }));\n    setSelectedState(state);\n    getActiveState().setDateOffset(state.selectedPattern, offset, function (date) {\n      return handleChange(date, event);\n    });\n    setSelectionRange(state.selectionStart, state.selectionEnd);\n  });\n  var onSegmentValueChangeWithNumericKeys = useEventCallback(function (event) {\n    var input = event.target;\n    var key = event.key;\n    var pattern = selectedState.selectedPattern;\n    if (!pattern) {\n      return;\n    }\n    var field = getActiveState().getDateField(pattern);\n    var value = parseInt(key, 10);\n    var padValue = parseInt(\"\" + (field.value || '') + key, 10);\n    var newValue = value;\n\n    // Check if the value entered by the user is a valid date\n    if (validateDateTime(field.name, padValue) && !isResetValue()) {\n      newValue = padValue;\n    }\n    getActiveState().setDateField(pattern, newValue, function (date) {\n      return handleChange(date, event);\n    });\n\n    // The currently selected month will be retained as a parameter of getInputSelectedState,\n    // but if the user enters a month, the month value will be replaced with the value entered by the user.\n    var selectedMonth = pattern === 'M' ? newValue : getActiveState().dateField.month;\n    var nextState = getInputSelectedState(_extends({}, keyPressOptions, {\n      input: input,\n      selectedMonth: selectedMonth\n    }));\n    setSelectedState(nextState);\n    setSelectionRange(nextState.selectionStart, nextState.selectionEnd);\n    increment();\n\n    // If the field is full value, move the cursor to the next field\n    if (isMoveCursor(newValue, pattern) && input.selectionEnd !== input.value.length) {\n      onSegmentChange(event, 'right');\n    }\n  });\n  var onSegmentValueRemove = useEventCallback(function (event) {\n    var input = event.target;\n    var value = input.value;\n    if (input.selectionStart === 0 && value && input.selectionEnd === value.length) {\n      handleClear(event);\n    } else if (selectedState.selectedPattern) {\n      var nextState = getInputSelectedState(_extends({}, keyPressOptions, {\n        input: input,\n        valueOffset: null\n      }));\n      setSelectedState(nextState);\n      setSelectionRange(nextState.selectionStart, nextState.selectionEnd);\n      getActiveState().setDateField(selectedState.selectedPattern, null, function (date) {\n        return handleChange(date, event);\n      });\n      reset();\n    }\n  });\n  var handleClick = useEventCallback(function (event) {\n    var input = event.target;\n    if (input.selectionStart === null) {\n      return;\n    }\n    var cursorIndex = input.selectionStart === renderedValue.length ? 0 : input.selectionStart;\n    var dateType = getDateType(renderedValue || rangeFormatStr, character, cursorIndex);\n    var state = getInputSelectedState(_extends({}, keyPressOptions, {\n      dateType: dateType,\n      selectedMonth: getActiveState(dateType).dateField.month,\n      input: input\n    }));\n    setDateType(dateType);\n    setSelectedState(state);\n    setSelectionRange(state.selectionStart, state.selectionEnd);\n    if (selectedState.selectedPattern !== state.selectedPattern) {\n      reset();\n    }\n  });\n  var handlePaste = useEventCallback(function (event) {\n    var _event$clipboardData;\n    event.preventDefault();\n    var pasteText = (_event$clipboardData = event.clipboardData) === null || _event$clipboardData === void 0 ? void 0 : _event$clipboardData.getData('text');\n    var _ref = pasteText.split(character).map(function (date) {\n        return parseDate(date, formatStr);\n      }),\n      start = _ref[0],\n      end = _ref[1];\n    if (isValid(start) && isValid(end)) {\n      var nextValue = [start, end];\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n      setValue(nextValue);\n      startDateState.setNewDate(start);\n      endDateState.setNewDate(end);\n    }\n    onPaste === null || onPaste === void 0 ? void 0 : onPaste(event);\n  });\n  var onKeyboardInput = useKeyboardInputEvent({\n    onSegmentChange: onSegmentChange,\n    onSegmentValueChange: onSegmentValueChange,\n    onSegmentValueChangeWithNumericKeys: onSegmentValueChangeWithNumericKeys,\n    onSegmentValueRemove: onSegmentValueRemove,\n    onKeyDown: onKeyDown\n  });\n  return /*#__PURE__*/React.createElement(Input, _extends({\n    inputMode: focused ? 'numeric' : 'text',\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    className: classes,\n    ref: mergeRefs(inputRef, ref),\n    onKeyDown: onKeyboardInput,\n    onClick: handleClick,\n    onPaste: handlePaste,\n    value: renderedValue,\n    placeholder: placeholder || rangeFormatStr\n  }, focusEventProps, rest));\n});\nDateRangeInput.displayName = 'DateRangeInput';\nDateRangeInput.propTypes = {\n  character: PropTypes.string,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  format: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func\n};\nexport default DateRangeInput;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useState","useRef","useMemo","PropTypes","Input","isValid","useClassNames","useControlled","useEventCallback","mergeRefs","validateDateTime","useDateInputState","useInputSelection","useKeyboardInputEvent","useIsFocused","useSelectedState","useFieldCursor","useCustom","getInputSelectedState","DateType","getDateType","isSwitchDateType","DateRangeInput","forwardRef","props","ref","_useCustom","propsWithDefaults","parseDate","getLocale","_getLocale","shortDateFormat","dateLocale","className","_propsWithDefaults$cl","classPrefix","_propsWithDefaults$ch","character","_propsWithDefaults$fo","format","formatStr","valueProp","value","_propsWithDefaults$de","defaultValue","placeholder","onChange","onKeyDown","onBlur","onFocus","onPaste","rest","_useClassNames","withClassPrefix","merge","classes","inputRef","_useSelectedState","selectedState","setSelectedState","rangeFormatStr","_useControlled","setValue","isControlled","_useState","Start","dateType","setDateType","dateInputOptions","locale","isControlledDate","startDateState","date","endDateState","_useFieldCursor","isMoveCursor","isResetValue","increment","reset","getActiveState","type","_useIsFocused","focused","focusEventProps","renderedValue","dateString","toDateString","isEmptyValue","keyPressOptions","localize","selectedMonth","dateField","month","setSelectionRange","handleChange","event","nextValue","handleClear","setNewDate","onSegmentChange","nextDirection","input","target","key","direction","selectionEnd","selectionStart","cursorIndex","nextDateType","End","state","selectedPattern","onSegmentValueChange","offset","valueOffset","setDateOffset","onSegmentValueChangeWithNumericKeys","pattern","field","getDateField","parseInt","padValue","newValue","name","setDateField","nextState","length","onSegmentValueRemove","handleClick","handlePaste","_event$clipboardData","preventDefault","pasteText","clipboardData","getData","_ref","split","map","start","end","onKeyboardInput","createElement","inputMode","autoComplete","autoCorrect","spellCheck","onClick","displayName","propTypes","string","func"],"sources":["/home/gabriel/Documents/formulario-change/node_modules/rsuite/esm/DateRangeInput/DateRangeInput.js"],"sourcesContent":["'use client';\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"classPrefix\", \"character\", \"format\", \"value\", \"defaultValue\", \"placeholder\", \"onChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"onPaste\"];\nimport React, { useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from \"../Input/index.js\";\nimport { isValid } from \"../internals/utils/date/index.js\";\nimport { useClassNames, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport { validateDateTime, useDateInputState, useInputSelection, useKeyboardInputEvent, useIsFocused, useSelectedState, useFieldCursor } from \"../DateInput/index.js\";\nimport { useCustom } from \"../CustomProvider/index.js\";\nimport { getInputSelectedState, DateType, getDateType, isSwitchDateType } from \"./utils.js\";\n/**\n * The DateRangeInput component lets users select a date with the keyboard.\n * @version 5.59.0\n * @see https://rsuitejs.com/components/date-range-input/\n */\nvar DateRangeInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useCustom = useCustom('Calendar', props),\n    propsWithDefaults = _useCustom.propsWithDefaults,\n    parseDate = _useCustom.parseDate,\n    getLocale = _useCustom.getLocale;\n  var _getLocale = getLocale('DateTimeFormats'),\n    shortDateFormat = _getLocale.shortDateFormat,\n    dateLocale = _getLocale.dateLocale;\n  var className = propsWithDefaults.className,\n    _propsWithDefaults$cl = propsWithDefaults.classPrefix,\n    classPrefix = _propsWithDefaults$cl === void 0 ? 'date-range-input' : _propsWithDefaults$cl,\n    _propsWithDefaults$ch = propsWithDefaults.character,\n    character = _propsWithDefaults$ch === void 0 ? ' ~ ' : _propsWithDefaults$ch,\n    _propsWithDefaults$fo = propsWithDefaults.format,\n    formatStr = _propsWithDefaults$fo === void 0 ? shortDateFormat : _propsWithDefaults$fo,\n    valueProp = propsWithDefaults.value,\n    _propsWithDefaults$de = propsWithDefaults.defaultValue,\n    defaultValue = _propsWithDefaults$de === void 0 ? [] : _propsWithDefaults$de,\n    placeholder = propsWithDefaults.placeholder,\n    onChange = propsWithDefaults.onChange,\n    onKeyDown = propsWithDefaults.onKeyDown,\n    onBlur = propsWithDefaults.onBlur,\n    onFocus = propsWithDefaults.onFocus,\n    onPaste = propsWithDefaults.onPaste,\n    rest = _objectWithoutPropertiesLoose(propsWithDefaults, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  var inputRef = useRef();\n  var _useSelectedState = useSelectedState(),\n    selectedState = _useSelectedState.selectedState,\n    setSelectedState = _useSelectedState.setSelectedState;\n  var rangeFormatStr = \"\" + formatStr + character + formatStr;\n  var _useControlled = useControlled(valueProp, defaultValue),\n    value = _useControlled[0],\n    setValue = _useControlled[1],\n    isControlled = _useControlled[2];\n  var _useState = useState(DateType.Start),\n    dateType = _useState[0],\n    setDateType = _useState[1];\n  var dateInputOptions = {\n    formatStr: formatStr,\n    locale: dateLocale,\n    isControlledDate: isControlled\n  };\n  var startDateState = useDateInputState(_extends({}, dateInputOptions, {\n    date: (value === null || value === void 0 ? void 0 : value[0]) || null\n  }));\n  var endDateState = useDateInputState(_extends({}, dateInputOptions, {\n    date: (value === null || value === void 0 ? void 0 : value[1]) || null\n  }));\n  var _useFieldCursor = useFieldCursor(formatStr, valueProp),\n    isMoveCursor = _useFieldCursor.isMoveCursor,\n    isResetValue = _useFieldCursor.isResetValue,\n    increment = _useFieldCursor.increment,\n    reset = _useFieldCursor.reset;\n  var getActiveState = function getActiveState(type) {\n    if (type === void 0) {\n      type = dateType;\n    }\n    return type === DateType.Start ? startDateState : endDateState;\n  };\n  var _useIsFocused = useIsFocused({\n      onBlur: onBlur,\n      onFocus: onFocus\n    }),\n    focused = _useIsFocused[0],\n    focusEventProps = _useIsFocused[1];\n  var renderedValue = useMemo(function () {\n    var dateString = startDateState.toDateString() + character + endDateState.toDateString();\n    if (!startDateState.isEmptyValue() || !endDateState.isEmptyValue()) {\n      return dateString;\n    }\n    return !focused ? '' : dateString;\n  }, [character, endDateState, focused, startDateState]);\n  var keyPressOptions = {\n    formatStr: formatStr,\n    rangeFormatStr: rangeFormatStr,\n    localize: dateLocale.localize,\n    selectedMonth: getActiveState().dateField.month,\n    dateString: renderedValue,\n    dateType: dateType,\n    character: character\n  };\n  var setSelectionRange = useInputSelection(inputRef);\n  var handleChange = useEventCallback(function (date, event) {\n    var nextValue = dateType === DateType.Start ? [date, value === null || value === void 0 ? void 0 : value[1]] : [value === null || value === void 0 ? void 0 : value[0], date];\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    setValue(nextValue);\n  });\n  var handleClear = useEventCallback(function (event) {\n    startDateState.setNewDate(null);\n    endDateState.setNewDate(null);\n    setSelectionRange(0, 0);\n    reset();\n    setValue(null);\n    onChange === null || onChange === void 0 ? void 0 : onChange(null, event);\n  });\n  var onSegmentChange = useEventCallback(function (event, nextDirection) {\n    var input = event.target;\n    var key = event.key;\n    var direction = nextDirection || (key === 'ArrowRight' ? 'right' : 'left');\n    if (input.selectionEnd === null || input.selectionStart === null) {\n      return;\n    }\n    var cursorIndex = direction === 'right' ? input.selectionEnd : input.selectionStart;\n    var nextDateType = dateType;\n    if (isSwitchDateType(renderedValue, character, cursorIndex, direction)) {\n      nextDateType = dateType === DateType.Start ? DateType.End : DateType.Start;\n      setDateType(nextDateType);\n    }\n    var state = getInputSelectedState(_extends({}, keyPressOptions, {\n      dateType: nextDateType,\n      selectedMonth: getActiveState(nextDateType).dateField.month,\n      input: input,\n      direction: direction\n    }));\n    setSelectedState(state);\n    setSelectionRange(state.selectionStart, state.selectionEnd);\n\n    // If the selected field changes, reset the input state\n    if (selectedState.selectedPattern !== state.selectedPattern) {\n      reset();\n    }\n  });\n  var onSegmentValueChange = useEventCallback(function (event) {\n    var input = event.target;\n    var key = event.key;\n    var offset = key === 'ArrowUp' ? 1 : -1;\n    var state = getInputSelectedState(_extends({}, keyPressOptions, {\n      input: input,\n      valueOffset: offset\n    }));\n    setSelectedState(state);\n    getActiveState().setDateOffset(state.selectedPattern, offset, function (date) {\n      return handleChange(date, event);\n    });\n    setSelectionRange(state.selectionStart, state.selectionEnd);\n  });\n  var onSegmentValueChangeWithNumericKeys = useEventCallback(function (event) {\n    var input = event.target;\n    var key = event.key;\n    var pattern = selectedState.selectedPattern;\n    if (!pattern) {\n      return;\n    }\n    var field = getActiveState().getDateField(pattern);\n    var value = parseInt(key, 10);\n    var padValue = parseInt(\"\" + (field.value || '') + key, 10);\n    var newValue = value;\n\n    // Check if the value entered by the user is a valid date\n    if (validateDateTime(field.name, padValue) && !isResetValue()) {\n      newValue = padValue;\n    }\n    getActiveState().setDateField(pattern, newValue, function (date) {\n      return handleChange(date, event);\n    });\n\n    // The currently selected month will be retained as a parameter of getInputSelectedState,\n    // but if the user enters a month, the month value will be replaced with the value entered by the user.\n    var selectedMonth = pattern === 'M' ? newValue : getActiveState().dateField.month;\n    var nextState = getInputSelectedState(_extends({}, keyPressOptions, {\n      input: input,\n      selectedMonth: selectedMonth\n    }));\n    setSelectedState(nextState);\n    setSelectionRange(nextState.selectionStart, nextState.selectionEnd);\n    increment();\n\n    // If the field is full value, move the cursor to the next field\n    if (isMoveCursor(newValue, pattern) && input.selectionEnd !== input.value.length) {\n      onSegmentChange(event, 'right');\n    }\n  });\n  var onSegmentValueRemove = useEventCallback(function (event) {\n    var input = event.target;\n    var value = input.value;\n    if (input.selectionStart === 0 && value && input.selectionEnd === value.length) {\n      handleClear(event);\n    } else if (selectedState.selectedPattern) {\n      var nextState = getInputSelectedState(_extends({}, keyPressOptions, {\n        input: input,\n        valueOffset: null\n      }));\n      setSelectedState(nextState);\n      setSelectionRange(nextState.selectionStart, nextState.selectionEnd);\n      getActiveState().setDateField(selectedState.selectedPattern, null, function (date) {\n        return handleChange(date, event);\n      });\n      reset();\n    }\n  });\n  var handleClick = useEventCallback(function (event) {\n    var input = event.target;\n    if (input.selectionStart === null) {\n      return;\n    }\n    var cursorIndex = input.selectionStart === renderedValue.length ? 0 : input.selectionStart;\n    var dateType = getDateType(renderedValue || rangeFormatStr, character, cursorIndex);\n    var state = getInputSelectedState(_extends({}, keyPressOptions, {\n      dateType: dateType,\n      selectedMonth: getActiveState(dateType).dateField.month,\n      input: input\n    }));\n    setDateType(dateType);\n    setSelectedState(state);\n    setSelectionRange(state.selectionStart, state.selectionEnd);\n    if (selectedState.selectedPattern !== state.selectedPattern) {\n      reset();\n    }\n  });\n  var handlePaste = useEventCallback(function (event) {\n    var _event$clipboardData;\n    event.preventDefault();\n    var pasteText = (_event$clipboardData = event.clipboardData) === null || _event$clipboardData === void 0 ? void 0 : _event$clipboardData.getData('text');\n    var _ref = pasteText.split(character).map(function (date) {\n        return parseDate(date, formatStr);\n      }),\n      start = _ref[0],\n      end = _ref[1];\n    if (isValid(start) && isValid(end)) {\n      var nextValue = [start, end];\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n      setValue(nextValue);\n      startDateState.setNewDate(start);\n      endDateState.setNewDate(end);\n    }\n    onPaste === null || onPaste === void 0 ? void 0 : onPaste(event);\n  });\n  var onKeyboardInput = useKeyboardInputEvent({\n    onSegmentChange: onSegmentChange,\n    onSegmentValueChange: onSegmentValueChange,\n    onSegmentValueChangeWithNumericKeys: onSegmentValueChangeWithNumericKeys,\n    onSegmentValueRemove: onSegmentValueRemove,\n    onKeyDown: onKeyDown\n  });\n  return /*#__PURE__*/React.createElement(Input, _extends({\n    inputMode: focused ? 'numeric' : 'text',\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    className: classes,\n    ref: mergeRefs(inputRef, ref),\n    onKeyDown: onKeyboardInput,\n    onClick: handleClick,\n    onPaste: handlePaste,\n    value: renderedValue,\n    placeholder: placeholder || rangeFormatStr\n  }, focusEventProps, rest));\n});\nDateRangeInput.displayName = 'DateRangeInput';\nDateRangeInput.propTypes = {\n  character: PropTypes.string,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  format: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func\n};\nexport default DateRangeInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}