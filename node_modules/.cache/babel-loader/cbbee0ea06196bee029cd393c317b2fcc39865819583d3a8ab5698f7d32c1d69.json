{"ast":null,"code":"'use client';\n\nimport { useMemo, useCallback } from 'react';\nimport { shouldRenderDate, shouldRenderTime, shouldOnlyRenderMonth, shouldOnlyRenderTime } from \"./formatCheck.js\";\nexport var DateMode = /*#__PURE__*/function (DateMode) {\n  DateMode[\"Date\"] = \"date\";\n  DateMode[\"Month\"] = \"month\";\n  DateMode[\"Time\"] = \"time\";\n  DateMode[\"DateTime\"] = \"datetime\";\n  return DateMode;\n}({});\n\n/**\n * Custom hook to determine the date mode and check format parts.\n *\n * @param format - The format string.\n * @returns An object containing the resolved DateMode and a `has` method to check format parts.\n */\nexport var useDateMode = function useDateMode(format) {\n  var mode = useMemo(function () {\n    if (shouldRenderDate(format) && shouldRenderTime(format)) {\n      return DateMode.DateTime;\n    }\n    if (shouldOnlyRenderMonth(format)) {\n      return DateMode.Month;\n    }\n    if (shouldOnlyRenderTime(format)) {\n      return DateMode.Time;\n    }\n    if (shouldRenderDate(format)) {\n      return DateMode.Date;\n    }\n    return DateMode.Date; // Default fallback\n  }, [format]);\n\n  // Use useCallback to memoize the has method\n  var has = useCallback(function (part) {\n    switch (part) {\n      case 'year':\n        return /[Yy]/.test(format);\n      case 'month':\n        return /[ML]/.test(format);\n      case 'day':\n        return /[Dd]/.test(format);\n      case 'time':\n        return /([Hhms])/.test(format);\n      default:\n        return false;\n    }\n  }, [format]);\n  return {\n    mode: mode,\n    has: has\n  };\n};","map":{"version":3,"names":["useMemo","useCallback","shouldRenderDate","shouldRenderTime","shouldOnlyRenderMonth","shouldOnlyRenderTime","DateMode","useDateMode","format","mode","DateTime","Month","Time","Date","has","part","test"],"sources":["/home/gabriel/Documents/formulario-change/node_modules/rsuite/esm/internals/utils/date/useDateMode.js"],"sourcesContent":["'use client';\nimport { useMemo, useCallback } from 'react';\nimport { shouldRenderDate, shouldRenderTime, shouldOnlyRenderMonth, shouldOnlyRenderTime } from \"./formatCheck.js\";\nexport var DateMode = /*#__PURE__*/function (DateMode) {\n  DateMode[\"Date\"] = \"date\";\n  DateMode[\"Month\"] = \"month\";\n  DateMode[\"Time\"] = \"time\";\n  DateMode[\"DateTime\"] = \"datetime\";\n  return DateMode;\n}({});\n\n/**\n * Custom hook to determine the date mode and check format parts.\n *\n * @param format - The format string.\n * @returns An object containing the resolved DateMode and a `has` method to check format parts.\n */\nexport var useDateMode = function useDateMode(format) {\n  var mode = useMemo(function () {\n    if (shouldRenderDate(format) && shouldRenderTime(format)) {\n      return DateMode.DateTime;\n    }\n    if (shouldOnlyRenderMonth(format)) {\n      return DateMode.Month;\n    }\n    if (shouldOnlyRenderTime(format)) {\n      return DateMode.Time;\n    }\n    if (shouldRenderDate(format)) {\n      return DateMode.Date;\n    }\n    return DateMode.Date; // Default fallback\n  }, [format]);\n\n  // Use useCallback to memoize the has method\n  var has = useCallback(function (part) {\n    switch (part) {\n      case 'year':\n        return /[Yy]/.test(format);\n      case 'month':\n        return /[ML]/.test(format);\n      case 'day':\n        return /[Dd]/.test(format);\n      case 'time':\n        return /([Hhms])/.test(format);\n      default:\n        return false;\n    }\n  }, [format]);\n  return {\n    mode: mode,\n    has: has\n  };\n};"],"mappings":"AAAA,YAAY;;AACZ,SAASA,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC5C,SAASC,gBAAgB,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAEC,oBAAoB,QAAQ,kBAAkB;AAClH,OAAO,IAAIC,QAAQ,GAAG,aAAa,UAAUA,QAAQ,EAAE;EACrDA,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM;EACzBA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3BA,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM;EACzBA,QAAQ,CAAC,UAAU,CAAC,GAAG,UAAU;EACjC,OAAOA,QAAQ;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAWA,CAACC,MAAM,EAAE;EACpD,IAAIC,IAAI,GAAGT,OAAO,CAAC,YAAY;IAC7B,IAAIE,gBAAgB,CAACM,MAAM,CAAC,IAAIL,gBAAgB,CAACK,MAAM,CAAC,EAAE;MACxD,OAAOF,QAAQ,CAACI,QAAQ;IAC1B;IACA,IAAIN,qBAAqB,CAACI,MAAM,CAAC,EAAE;MACjC,OAAOF,QAAQ,CAACK,KAAK;IACvB;IACA,IAAIN,oBAAoB,CAACG,MAAM,CAAC,EAAE;MAChC,OAAOF,QAAQ,CAACM,IAAI;IACtB;IACA,IAAIV,gBAAgB,CAACM,MAAM,CAAC,EAAE;MAC5B,OAAOF,QAAQ,CAACO,IAAI;IACtB;IACA,OAAOP,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;;EAEZ;EACA,IAAIM,GAAG,GAAGb,WAAW,CAAC,UAAUc,IAAI,EAAE;IACpC,QAAQA,IAAI;MACV,KAAK,MAAM;QACT,OAAO,MAAM,CAACC,IAAI,CAACR,MAAM,CAAC;MAC5B,KAAK,OAAO;QACV,OAAO,MAAM,CAACQ,IAAI,CAACR,MAAM,CAAC;MAC5B,KAAK,KAAK;QACR,OAAO,MAAM,CAACQ,IAAI,CAACR,MAAM,CAAC;MAC5B,KAAK,MAAM;QACT,OAAO,UAAU,CAACQ,IAAI,CAACR,MAAM,CAAC;MAChC;QACE,OAAO,KAAK;IAChB;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZ,OAAO;IACLC,IAAI,EAAEA,IAAI;IACVK,GAAG,EAAEA;EACP,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}